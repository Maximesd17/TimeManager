# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Elixir CI

on:
  push:
    branches: [ "main", "dev", "**/dev" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  runner-job:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./api

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      MIX_ENV: prod
      SECRET_KEY_BASE: $(mix phx.gen.secret)
      DATABASE_URL: ecto://postgres:postgres@localhost/gotham_city_dev
    steps:
    - uses: actions/checkout@v3
    - name: Set up Elixir
      uses: erlef/setup-beam@61e01a43a562a89bfc54c7f9a378ff67b03e4a21 # v1.16.0
      with:
        elixir-version: '1.15.2' # [Required] Define the Elixir version
        otp-version: '26.0'      # [Required] Define the Erlang/OTP version
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      run: mix deps.get --only prod
    - name: Compiling project
      run: mix compile
    - name: Create prod DataBase
      run: mix ecto.create
    - name: Migrating to DataBase
      run: mix ecto.migrate
    - name: Build docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        key: ${{ secrets.SSH_KEY }}
        username: ${{ secrets.SSH_USER }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          branch_name=${GITHUB_REF#refs/heads/}
          echo "Branch name is $branch_name"
          if [ ! -d "timeManager" ]; then
              git clone ${{ github.server_url }}/${{ github.repository }} timeManager
          else
              echo "Repo already exists in server..."
          fi
          cd timeManager
          git pull
          docker compose up -d --build